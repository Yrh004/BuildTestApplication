############################################
#  Deploy App to AKS using GitHub Actions  #
#           By: Yasmine Hines              #
#            Date: 1/5/2023                #
############################################

name: Deploy App to AKS

on:
  push:
    branches:
    - deployment

jobs:
  deployAppToAks:
    permissions:
      contents: read
      id-token: write
    runs-on: [self-hosted, macOS, X64 ]
    steps:
      - uses: actions/checkout@v3

      # Log in with your Azure credentials
      - name: Azure login
        uses: azure/login@v1.4.6
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      # Log in with your Docker account 
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # Build the python app into a Docker image
      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./pythonrestapi/Dockerfile
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/pythonrestapi:0.0.2

      # Install kubectl to use for deploying app to Aks
      - name: Install kubectl
        uses: azure/setup-kubectl@v1
        with:
          version: 'v1.21.3'
        id: install
      # - run: |
      #     cd Kubernetes/deployment
      #     kubectl apply -f pythonrestapi-deployment.yaml
      #     kubectl apply -f pythonrestapi-service.yaml

      # Deploy Docker image in my AKS cluster
      - uses: tale/kubectl-action@v1
        with:
          base64-kube-config: ${{ secrets.KUBE_CONFIG }}
      - run: |
          kubectl apply -f /Kubernetes/deployment/pythonrestapi-deployment.yaml
          kubectl apply -f /Kubernetes/deployment/pythonrestapi-service.yaml
          service = kubectl get svc pythonrestapi-service -n default \ -o jsonpath="{.status.loadBalancer.ingress[*].ip}"
      # Wait to verify Docker image works in the AKS 
      # Check the service for Exteral IP
      # - name: Check/Test
      #   run: |
      #     kubectl get svc
      #     kubectl get svc pythonrestapi-service -n default \
      #     -o jsonpath="{.status.loadBalancer.ingress[*].ip}"

  # cleanUp:
      # Cleanup K8 cluster
      # - name: Cleanup
      #   run: |
      #     kubectl delete services pythonrestapi-service
      #     kubectl delete deployment pythonrestapi-deploy
